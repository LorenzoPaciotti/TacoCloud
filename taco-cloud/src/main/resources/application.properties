#disabilita caching pagine generate da thymeleaf
spring.thymeleaf.cache=false

#selezione database
spring.datasource.platform=h2
#il path JDBC deve inziare per test_ in ambienti di sviluppo
spring.datasource.url=jdbc:h2:~/test_tacos

#utilizzo già script di inizializzazione schema-h2.sql e data-h2.sql, quindi non voglio far generare lo schema a JPA.
spring.jpa.hibernate.ddl-auto=none

################ POSTGRESQL #####################

### Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
#spring.datasource.platform=postgresql
##spring.datasource.schema=public
#spring.datasource.url=jdbc:postgresql://localhost:5432/tacos
#spring.datasource.username=spring
#spring.datasource.password=spring
## The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
##inizializzo sempre schema, anche se non sto usando un database embedded di sviluppo (PERICOLOSO)
#spring.datasource.initialization-mode=always
##!!!!
## Hibernate ddl auto (create, create-drop, validate, update)
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=create-drop
#
##Since, the example web application is using JPA, we configured Hibernate for PostgreSQL in Line 5 to use the create-drop option. 
##This tells Hibernate to recreate the database on startup. 
##However, in testing or production databases, you will want to use the validate option.
#
##rimuove eccezione (warning)
#spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

################# END POSTGRESQL ###################